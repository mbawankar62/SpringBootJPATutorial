package com.mohit.corejava.optional;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class OptionalTest {
	/**
	 * If the element is not null, then both Optional.of and Optional.ofNullable behavior is same.
	 *  But in case of null, Optional.of throws NullPointerException, 
	 *  whereas Optional.ofNullable return empty Optional.
	 * @param args
	 */
	 public static void main(String args[]) {
		 
		 //List to map
			List<String> list = new ArrayList<String>(Arrays.asList("1","2","3","4","5"));
			Map<Character, IntStream> collect = list.stream().collect(Collectors.toMap(e->e.charAt(0), e1->e1.chars()));
			System.out.println(collect);
		 
	        String str = "Hello World";

	        Optional<String> optionalOf = Optional.of(str);
	        Optional<String> optionalNullable = Optional.ofNullable(str);

	        System.out.println("For non null value");
	        System.out.println("\toptionalOf1 : " + optionalOf.get());
	        System.out.println("\toptionalNullable : " + optionalNullable.get());

	        str = null;

	        System.out.println("\nFor null value");
	        try {
	            optionalOf = Optional.of(str);
	        } catch (NullPointerException e) {
	            System.out.println("\tNullPointerException thrown for 'Optional.of' method");
	        }

	        optionalNullable = Optional.ofNullable(str);

	        try {
	            System.out.println("optionalNullable : " + optionalNullable.get());
	        } catch (NoSuchElementException e) {
	            System.out.println("\tNoSuchElementException thrown for 'optionalNullable.get()' method");
	        }

	    }
}

