package com.mohit.corejava.optional;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

class ListItems {
	 
    // key will act as an id of the value
    private Integer key;
 
    // value will be the value of the above key
    private String value;
 
    // create constructor for reference
    public ListItems(Integer id, String name)
    {
 
        // assigning the value of key and value
        this.key = id;
        this.value = name;
    }
 
    // return private variable key
    public Integer getkey() { return key; }
 
    // return private variable name
    public String getvalue() { return value; }
}

public class OptionalTest {

	//List to map
	List<ListItems> list = new ArrayList<ListItems>();
    // add the member of list
    list.add(new ListItems(1, "I"));
    list.add(new ListItems(2, "Love"));
    list.add(new ListItems(3, "Geeks"));
    list.add(new ListItems(4, "For"));
    list.add(new ListItems(5, "Geeks"));
	
	/**
	 * If the element is not null, then both Optional.of and Optional.ofNullable behavior is same.
	 *  But in case of null, Optional.of throws NullPointerException, 
	 *  whereas Optional.ofNullable return empty Optional.
	 * @param args
	 */
	 public static void main(String args[]) {
	        String str = "Hello World";

	        Optional<String> optionalOf = Optional.of(str);
	        Optional<String> optionalNullable = Optional.ofNullable(str);

	        System.out.println("For non null value");
	        System.out.println("\toptionalOf1 : " + optionalOf.get());
	        System.out.println("\toptionalNullable : " + optionalNullable.get());

	        str = null;

	        System.out.println("\nFor null value");
	        try {
	            optionalOf = Optional.of(str);
	        } catch (NullPointerException e) {
	            System.out.println("\tNullPointerException thrown for 'Optional.of' method");
	        }

	        optionalNullable = Optional.ofNullable(str);

	        try {
	            System.out.println("optionalNullable : " + optionalNullable.get());
	        } catch (NoSuchElementException e) {
	            System.out.println("\tNoSuchElementException thrown for 'optionalNullable.get()' method");
	        }

	    }
}

