spring.application.name=currency-exchange
server.port=8000
#spring.config.import=optional:configserver:http://localhost:8888

#http://localhost:8000/currency-exchange/from/USD/to/INR
spring.cloud.config.import-check.enabled=false

#http://localhost:8000/h2-console/login.jsp?jsessionid=6a7e196288c7be7ff48bff7affac7f4d
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true

#By default, data.sql scripts get executed before the Hibernate is initialized. 
#We need Hibernate to create our tables before inserting the data into them.
#To achieve this, we need to defer the initialization of our data source. We'll use the below property to achieve this
spring.jpa.defer-datasource-initialization=true 

# For >2.5.0
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=localhost

resilience4j.retry.instances.sample-api.maxAttempts=5
#sample-api is name @Retry(name = "sample-api", fallbackMethod = "hardcodedResponse") in CircuitBreakerController
 #NEW
#resilience4j.retry.instances.sample-api.maxRetryAttempts=5 #OLD

resilience4j.retry.instances.sample-api.waitDuration=1s
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true
#resilience4j.circuitbreaker.instances.default.failureRateThreshold=90
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10
resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10

#Docker
#spring.sleuth.sampler.probability=1.0
#management.tracing.sampling.probability=1.0 #SB3
#logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] #SB3